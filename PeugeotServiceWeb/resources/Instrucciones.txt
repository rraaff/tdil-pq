Instalacion
===========

Instalar ffmpeg, sofware necesario para procesar las imagenes de los avatars

Crear a base de datos con los scripts correspondientes (mysql o sqlserver)

Copiar el war al directorio de deploy de la configuracion.
1) mysql: mysql/LOJACK_WEB.war
1) sqlserver: sqlserver/LOJACK_WEB.war

En los pasos de creacion de base de datos, usuario y copiado de datasources cambiar los datos de la base y
usuario de creerlo necesario.

Crear la base de datos y el usuario:
1) mysql: mysql/create-mysql.sql
2) sqlserver: sqlserver/db-sqlserver.sql

Crear los objetos con el usuario:
1) mysql: mysql/create-mysql.sql
2) sqlserver: sqlserver/create-sqlserver.sql

Copiar la definicion de datasource correspondiente al directorio de deploy:
1) mysql: mysql/mysql-ds.xml
2) sqlserver: sqlserver/sqlserver-ds.xml

Copiar el jar del driver al directorio lib de la configuracion de jboss:
1) mysql: mysql/mysql-connector-java-5.1.13-bin.jar
2) sqlserver: sqlserver/sqljdbc4.jar

Configuracion
=============

Toda la configuracion de la aplicacion se realiza a traves de datos de la tabla SYSPROPERTIES.

A continuacion se listan las propiedades y su uso:

front.server: Se usa para generar links a la aplicacion que son absolutos, debe tener el nombre con el 
	cual el server que hostea el front se ve desde otros equipos, por ejemplo: www.lojackhome.com

thalamus.server: url del server  de thalamus, por ejemplo http://localhost:8280/ThalamusWeb/ o 
	https://testa-lojack-rest.thalamuslive.com/lojack

thalamus.touchpoint.code: codigo asignado para thalamus (REAL-LIFE-SMARTPHONE-APP)

thalamus.touchpoint.token: token asignado para thalamus 
	(k8exyct1v6edf9q50fryuq3r02upn0m98twst4etlbjgc9cnsq585879gxlcbu11)

gis.server: Ubicacion del server de GIS, por ejemplo http://localhost:8180/GISWeb/gis/

services.server: Ubicacion del server de servicios no GIS, por lo hablado debe ser el mismo.

prevent.server: Ubicacion del server de prevent, por ejemplo 
	http://www.lojackgis.com.ar/PreventWCFServices/GISService.svc

prop.tmp.path: Directorio temporal, aqui se extraera la configuracion del log4j y se escribira el log, 
	asi como los blobs seran extraidos en dicho directorio

camera.mobile.refreshTime: Tiempo de refresco de la version mobile de la camara, representa la 
	cantidad de milisegundos de refresco entre imagen e imagen

camera.applet.refreshTime: Tiempo de refresco de la version applet de la camara, representa la 
	cantidad de milisegundos de refresco entre imagen e imagen

job.refresh.time: Tiempo de refresco del proceso del front que consulta los estados de los jobs 
	asincronicos. Se expresa en milisegundos

job.abort.time: Tiempo pasado el cual se asume que un job no terminara. Pasado ese tiempo no se 
	consultara mas dicho job. Se expresa en milisegundos

job.client.refresh.time: Tiempo de refresco del ajax del cliente que consulta los estados de los 
	jobs. Se expresa en milisegundos

front.login.deplay: Milisegundos de retraso del login.

gui: guid para usar en la comunicacion con gis

contactform.email: Direccion de email a la cual se enviaran los formularios de contacto

Mails
=======

La configuracion para envio de emails se encuentra en la tabla SYSPROPERTIES con el prefijo mail.
Se provee una configuracion ejemplo que utiliza gmail para el envio (cuenta test.lojack.front@gmail.com/t3stl0j4k)

Logging
=======

La configuracion del log de la aplicacion se realiza a traves de log4j.
La aplicacion extrae automaticamente el log4j al directorio prop.tmp.path, luego puede ser editado para configurarl.
Si bien cada clase tiene su log, existen tres clases que pueden ser particularmente importantes y son las que acceden 
a servicios externos:

com.tdil.thalamus.client.core.ThalamusClient: log de la clase que maneja la comunicacion con thalamus. 
	En modo debug muestra todas las invocaciones, incluyendo parametros y resultados.
	En modo info muestra los tiempos de las invocaciones.
	
com.tdil.ljpeugeot.prevent.PreventConnector: log de la clase que maneja la comunicacion con prevent. 
	En modo debug muestra todas las invocaciones, incluyendo parametros y resultados.
	En modo info muestra los tiempos de las invocaciones.
	
com.tdil.ljpeugeot.gis.LoJackServicesConnector: log de la clase que maneja la comunicacion con el middleware. 
	En modo debug muestra todas las invocaciones, incluyendo parametros y resultados.
	En modo info muestra los tiempos de las invocaciones.

Se recomienda quitar el uso de console appender en el ambiente productivo