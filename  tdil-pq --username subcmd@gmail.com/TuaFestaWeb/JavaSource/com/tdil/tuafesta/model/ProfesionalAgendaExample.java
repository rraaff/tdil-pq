package com.tdil.tuafesta.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class ProfesionalAgendaExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table PROFESIONAL_AGENDA
     *
     * @mbggenerated Mon Oct 29 16:37:30 ART 2012
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table PROFESIONAL_AGENDA
     *
     * @mbggenerated Mon Oct 29 16:37:30 ART 2012
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table PROFESIONAL_AGENDA
     *
     * @mbggenerated Mon Oct 29 16:37:30 ART 2012
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PROFESIONAL_AGENDA
     *
     * @mbggenerated Mon Oct 29 16:37:30 ART 2012
     */
    public ProfesionalAgendaExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PROFESIONAL_AGENDA
     *
     * @mbggenerated Mon Oct 29 16:37:30 ART 2012
     */
    protected ProfesionalAgendaExample(ProfesionalAgendaExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
        this.distinct = example.distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PROFESIONAL_AGENDA
     *
     * @mbggenerated Mon Oct 29 16:37:30 ART 2012
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PROFESIONAL_AGENDA
     *
     * @mbggenerated Mon Oct 29 16:37:30 ART 2012
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PROFESIONAL_AGENDA
     *
     * @mbggenerated Mon Oct 29 16:37:30 ART 2012
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PROFESIONAL_AGENDA
     *
     * @mbggenerated Mon Oct 29 16:37:30 ART 2012
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PROFESIONAL_AGENDA
     *
     * @mbggenerated Mon Oct 29 16:37:30 ART 2012
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PROFESIONAL_AGENDA
     *
     * @mbggenerated Mon Oct 29 16:37:30 ART 2012
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PROFESIONAL_AGENDA
     *
     * @mbggenerated Mon Oct 29 16:37:30 ART 2012
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PROFESIONAL_AGENDA
     *
     * @mbggenerated Mon Oct 29 16:37:30 ART 2012
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PROFESIONAL_AGENDA
     *
     * @mbggenerated Mon Oct 29 16:37:30 ART 2012
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PROFESIONAL_AGENDA
     *
     * @mbggenerated Mon Oct 29 16:37:30 ART 2012
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table PROFESIONAL_AGENDA
     *
     * @mbggenerated Mon Oct 29 16:37:30 ART 2012
     */
    protected abstract static class GeneratedCriteria {
        protected List<String> criteriaWithoutValue;

        protected List<Map<String, Object>> criteriaWithSingleValue;

        protected List<Map<String, Object>> criteriaWithListValue;

        protected List<Map<String, Object>> criteriaWithBetweenValue;

        protected GeneratedCriteria() {
            super();
            criteriaWithoutValue = new ArrayList<String>();
            criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
            criteriaWithListValue = new ArrayList<Map<String, Object>>();
            criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List<String> getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List<Map<String, Object>> getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List<Map<String, Object>> getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List<Map<String, Object>> getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List<? extends Object> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Object> list = new ArrayList<Object>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andIdIsNull() {
            addCriterion("pa.id is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("pa.id is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("pa.id =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("pa.id <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("pa.id >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("pa.id >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("pa.id <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("pa.id <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Integer> values) {
            addCriterion("pa.id in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Integer> values) {
            addCriterion("pa.id not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("pa.id between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("pa.id not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdProfesionalIsNull() {
            addCriterion("pa.id_profesional is null");
            return (Criteria) this;
        }

        public Criteria andIdProfesionalIsNotNull() {
            addCriterion("pa.id_profesional is not null");
            return (Criteria) this;
        }

        public Criteria andIdProfesionalEqualTo(Integer value) {
            addCriterion("pa.id_profesional =", value, "idProfesional");
            return (Criteria) this;
        }

        public Criteria andIdProfesionalNotEqualTo(Integer value) {
            addCriterion("pa.id_profesional <>", value, "idProfesional");
            return (Criteria) this;
        }

        public Criteria andIdProfesionalGreaterThan(Integer value) {
            addCriterion("pa.id_profesional >", value, "idProfesional");
            return (Criteria) this;
        }

        public Criteria andIdProfesionalGreaterThanOrEqualTo(Integer value) {
            addCriterion("pa.id_profesional >=", value, "idProfesional");
            return (Criteria) this;
        }

        public Criteria andIdProfesionalLessThan(Integer value) {
            addCriterion("pa.id_profesional <", value, "idProfesional");
            return (Criteria) this;
        }

        public Criteria andIdProfesionalLessThanOrEqualTo(Integer value) {
            addCriterion("pa.id_profesional <=", value, "idProfesional");
            return (Criteria) this;
        }

        public Criteria andIdProfesionalIn(List<Integer> values) {
            addCriterion("pa.id_profesional in", values, "idProfesional");
            return (Criteria) this;
        }

        public Criteria andIdProfesionalNotIn(List<Integer> values) {
            addCriterion("pa.id_profesional not in", values, "idProfesional");
            return (Criteria) this;
        }

        public Criteria andIdProfesionalBetween(Integer value1, Integer value2) {
            addCriterion("pa.id_profesional between", value1, value2, "idProfesional");
            return (Criteria) this;
        }

        public Criteria andIdProfesionalNotBetween(Integer value1, Integer value2) {
            addCriterion("pa.id_profesional not between", value1, value2, "idProfesional");
            return (Criteria) this;
        }

        public Criteria andDateIsNull() {
            addCriterion("pa.date_ is null");
            return (Criteria) this;
        }

        public Criteria andDateIsNotNull() {
            addCriterion("pa.date_ is not null");
            return (Criteria) this;
        }

        public Criteria andDateEqualTo(Date value) {
            addCriterionForJDBCDate("pa.date_ =", value, "date");
            return (Criteria) this;
        }

        public Criteria andDateNotEqualTo(Date value) {
            addCriterionForJDBCDate("pa.date_ <>", value, "date");
            return (Criteria) this;
        }

        public Criteria andDateGreaterThan(Date value) {
            addCriterionForJDBCDate("pa.date_ >", value, "date");
            return (Criteria) this;
        }

        public Criteria andDateGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("pa.date_ >=", value, "date");
            return (Criteria) this;
        }

        public Criteria andDateLessThan(Date value) {
            addCriterionForJDBCDate("pa.date_ <", value, "date");
            return (Criteria) this;
        }

        public Criteria andDateLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("pa.date_ <=", value, "date");
            return (Criteria) this;
        }

        public Criteria andDateIn(List<Date> values) {
            addCriterionForJDBCDate("pa.date_ in", values, "date");
            return (Criteria) this;
        }

        public Criteria andDateNotIn(List<Date> values) {
            addCriterionForJDBCDate("pa.date_ not in", values, "date");
            return (Criteria) this;
        }

        public Criteria andDateBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("pa.date_ between", value1, value2, "date");
            return (Criteria) this;
        }

        public Criteria andDateNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("pa.date_ not between", value1, value2, "date");
            return (Criteria) this;
        }

        public Criteria andBusyIsNull() {
            addCriterion("pa.busy is null");
            return (Criteria) this;
        }

        public Criteria andBusyIsNotNull() {
            addCriterion("pa.busy is not null");
            return (Criteria) this;
        }

        public Criteria andBusyEqualTo(Integer value) {
            addCriterion("pa.busy =", value, "busy");
            return (Criteria) this;
        }

        public Criteria andBusyNotEqualTo(Integer value) {
            addCriterion("pa.busy <>", value, "busy");
            return (Criteria) this;
        }

        public Criteria andBusyGreaterThan(Integer value) {
            addCriterion("pa.busy >", value, "busy");
            return (Criteria) this;
        }

        public Criteria andBusyGreaterThanOrEqualTo(Integer value) {
            addCriterion("pa.busy >=", value, "busy");
            return (Criteria) this;
        }

        public Criteria andBusyLessThan(Integer value) {
            addCriterion("pa.busy <", value, "busy");
            return (Criteria) this;
        }

        public Criteria andBusyLessThanOrEqualTo(Integer value) {
            addCriterion("pa.busy <=", value, "busy");
            return (Criteria) this;
        }

        public Criteria andBusyIn(List<Integer> values) {
            addCriterion("pa.busy in", values, "busy");
            return (Criteria) this;
        }

        public Criteria andBusyNotIn(List<Integer> values) {
            addCriterion("pa.busy not in", values, "busy");
            return (Criteria) this;
        }

        public Criteria andBusyBetween(Integer value1, Integer value2) {
            addCriterion("pa.busy between", value1, value2, "busy");
            return (Criteria) this;
        }

        public Criteria andBusyNotBetween(Integer value1, Integer value2) {
            addCriterion("pa.busy not between", value1, value2, "busy");
            return (Criteria) this;
        }

        public Criteria andDeletedIsNull() {
            addCriterion("pa.deleted is null");
            return (Criteria) this;
        }

        public Criteria andDeletedIsNotNull() {
            addCriterion("pa.deleted is not null");
            return (Criteria) this;
        }

        public Criteria andDeletedEqualTo(Integer value) {
            addCriterion("pa.deleted =", value, "deleted");
            return (Criteria) this;
        }

        public Criteria andDeletedNotEqualTo(Integer value) {
            addCriterion("pa.deleted <>", value, "deleted");
            return (Criteria) this;
        }

        public Criteria andDeletedGreaterThan(Integer value) {
            addCriterion("pa.deleted >", value, "deleted");
            return (Criteria) this;
        }

        public Criteria andDeletedGreaterThanOrEqualTo(Integer value) {
            addCriterion("pa.deleted >=", value, "deleted");
            return (Criteria) this;
        }

        public Criteria andDeletedLessThan(Integer value) {
            addCriterion("pa.deleted <", value, "deleted");
            return (Criteria) this;
        }

        public Criteria andDeletedLessThanOrEqualTo(Integer value) {
            addCriterion("pa.deleted <=", value, "deleted");
            return (Criteria) this;
        }

        public Criteria andDeletedIn(List<Integer> values) {
            addCriterion("pa.deleted in", values, "deleted");
            return (Criteria) this;
        }

        public Criteria andDeletedNotIn(List<Integer> values) {
            addCriterion("pa.deleted not in", values, "deleted");
            return (Criteria) this;
        }

        public Criteria andDeletedBetween(Integer value1, Integer value2) {
            addCriterion("pa.deleted between", value1, value2, "deleted");
            return (Criteria) this;
        }

        public Criteria andDeletedNotBetween(Integer value1, Integer value2) {
            addCriterion("pa.deleted not between", value1, value2, "deleted");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table PROFESIONAL_AGENDA
     *
     * @mbggenerated do_not_delete_during_merge Mon Oct 29 16:37:30 ART 2012
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }
}