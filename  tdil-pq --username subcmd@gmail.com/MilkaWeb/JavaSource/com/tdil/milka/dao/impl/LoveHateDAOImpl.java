package com.tdil.milka.dao.impl;

import com.ibatis.sqlmap.client.SqlMapClient;
import com.tdil.milka.dao.LoveHateDAO;
import com.tdil.milka.model.LoveHate;
import com.tdil.milka.model.LoveHateExample;
import com.tdil.milka.model.LoveNicknames;

import java.sql.SQLException;
import java.util.List;

public class LoveHateDAOImpl implements LoveHateDAO {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table LOVE_HATE
     *
     * @mbggenerated Wed Jun 27 22:57:22 ART 2012
     */
    private SqlMapClient sqlMapClient;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LOVE_HATE
     *
     * @mbggenerated Wed Jun 27 22:57:22 ART 2012
     */
    public LoveHateDAOImpl(SqlMapClient sqlMapClient) {
        super();
        this.sqlMapClient = sqlMapClient;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LOVE_HATE
     *
     * @mbggenerated Wed Jun 27 22:57:22 ART 2012
     */
    public int countLoveHateByExample(LoveHateExample example) throws SQLException {
        Integer count = (Integer)  sqlMapClient.queryForObject("LOVE_HATE.countByExample", example);
        return count;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LOVE_HATE
     *
     * @mbggenerated Wed Jun 27 22:57:22 ART 2012
     */
    public int deleteLoveHateByExample(LoveHateExample example) throws SQLException {
        int rows = sqlMapClient.delete("LOVE_HATE.deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LOVE_HATE
     *
     * @mbggenerated Wed Jun 27 22:57:22 ART 2012
     */
    public int deleteLoveHateByPrimaryKey(Integer id) throws SQLException {
        LoveHate _key = new LoveHate();
        _key.setId(id);
        int rows = sqlMapClient.delete("LOVE_HATE.deleteByPrimaryKey", _key);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LOVE_HATE
     *
     * @mbggenerated Wed Jun 27 22:57:22 ART 2012
     */
    public Integer insertLoveHate(LoveHate record) throws SQLException {
        Object newKey = sqlMapClient.insert("LOVE_HATE.insert", record);
        return (Integer) newKey;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LOVE_HATE
     *
     * @mbggenerated Wed Jun 27 22:57:22 ART 2012
     */
    public Integer insertLoveHateSelective(LoveHate record) throws SQLException {
        Object newKey = sqlMapClient.insert("LOVE_HATE.insertSelective", record);
        return (Integer) newKey;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LOVE_HATE
     *
     * @mbggenerated Wed Jun 27 22:57:22 ART 2012
     */
    @SuppressWarnings("unchecked")
    public List<LoveHate> selectLoveHateByExample(LoveHateExample example) throws SQLException {
        List<LoveHate> list = sqlMapClient.queryForList("LOVE_HATE.selectByExample", example);
        return list;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LOVE_HATE
     *
     * @mbggenerated Wed Jun 27 22:57:22 ART 2012
     */
    public LoveHate selectLoveHateByPrimaryKey(Integer id) throws SQLException {
        LoveHate _key = new LoveHate();
        _key.setId(id);
        LoveHate record = (LoveHate) sqlMapClient.queryForObject("LOVE_HATE.selectByPrimaryKey", _key);
        return record;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LOVE_HATE
     *
     * @mbggenerated Wed Jun 27 22:57:22 ART 2012
     */
    public int updateLoveHateByExampleSelective(LoveHate record, LoveHateExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = sqlMapClient.update("LOVE_HATE.updateByExampleSelective", parms);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LOVE_HATE
     *
     * @mbggenerated Wed Jun 27 22:57:22 ART 2012
     */
    public int updateLoveHateByExample(LoveHate record, LoveHateExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = sqlMapClient.update("LOVE_HATE.updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LOVE_HATE
     *
     * @mbggenerated Wed Jun 27 22:57:22 ART 2012
     */
    public int updateLoveHateByPrimaryKeySelective(LoveHate record) throws SQLException {
        int rows = sqlMapClient.update("LOVE_HATE.updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LOVE_HATE
     *
     * @mbggenerated Wed Jun 27 22:57:22 ART 2012
     */
    public int updateLoveHateByPrimaryKey(LoveHate record) throws SQLException {
        int rows = sqlMapClient.update("LOVE_HATE.updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table LOVE_HATE
     *
     * @mbggenerated Wed Jun 27 22:57:22 ART 2012
     */
    protected static class UpdateByExampleParms extends LoveHateExample {
        private Object record;

        public UpdateByExampleParms(Object record, LoveHateExample example) {
            super(example);
            this.record = record;
        }

        public Object getRecord() {
            return record;
        }
    }
    
	public List<LoveHate> selectLoveHateToApprove() throws SQLException {
		return sqlMapClient.queryForList("LOVE_HATE.selectLoveHateToApprove");
	}
	
	public List<LoveHate> selectLoveHateToReview() throws SQLException {
		return sqlMapClient.queryForList("LOVE_HATE.selectLoveHateToReview");
	}
}