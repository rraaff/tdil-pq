package com.tdil.milka.dao.impl;

import com.ibatis.sqlmap.client.SqlMapClient;
import com.tdil.milka.dao.MailToChildDAO;
import com.tdil.milka.model.MailToChild;
import com.tdil.milka.model.MailToChildExample;
import java.sql.SQLException;
import java.util.List;

public class MailToChildDAOImpl implements MailToChildDAO {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table MAIL_TO_CHILD
     *
     * @mbggenerated Tue Jun 26 00:24:51 ART 2012
     */
    private SqlMapClient sqlMapClient;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table MAIL_TO_CHILD
     *
     * @mbggenerated Tue Jun 26 00:24:51 ART 2012
     */
    public MailToChildDAOImpl(SqlMapClient sqlMapClient) {
        super();
        this.sqlMapClient = sqlMapClient;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table MAIL_TO_CHILD
     *
     * @mbggenerated Tue Jun 26 00:24:51 ART 2012
     */
    public int countMailToChildByExample(MailToChildExample example) throws SQLException {
        Integer count = (Integer)  sqlMapClient.queryForObject("MAIL_TO_CHILD.countByExample", example);
        return count;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table MAIL_TO_CHILD
     *
     * @mbggenerated Tue Jun 26 00:24:51 ART 2012
     */
    public int deleteMailToChildByExample(MailToChildExample example) throws SQLException {
        int rows = sqlMapClient.delete("MAIL_TO_CHILD.deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table MAIL_TO_CHILD
     *
     * @mbggenerated Tue Jun 26 00:24:51 ART 2012
     */
    public int deleteMailToChildByPrimaryKey(Integer id) throws SQLException {
        MailToChild _key = new MailToChild();
        _key.setId(id);
        int rows = sqlMapClient.delete("MAIL_TO_CHILD.deleteByPrimaryKey", _key);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table MAIL_TO_CHILD
     *
     * @mbggenerated Tue Jun 26 00:24:51 ART 2012
     */
    public Integer insertMailToChild(MailToChild record) throws SQLException {
        Object newKey = sqlMapClient.insert("MAIL_TO_CHILD.insert", record);
        return (Integer) newKey;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table MAIL_TO_CHILD
     *
     * @mbggenerated Tue Jun 26 00:24:51 ART 2012
     */
    public Integer insertMailToChildSelective(MailToChild record) throws SQLException {
        Object newKey = sqlMapClient.insert("MAIL_TO_CHILD.insertSelective", record);
        return (Integer) newKey;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table MAIL_TO_CHILD
     *
     * @mbggenerated Tue Jun 26 00:24:51 ART 2012
     */
    @SuppressWarnings("unchecked")
    public List<MailToChild> selectMailToChildByExample(MailToChildExample example) throws SQLException {
        List<MailToChild> list = sqlMapClient.queryForList("MAIL_TO_CHILD.selectByExample", example);
        return list;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table MAIL_TO_CHILD
     *
     * @mbggenerated Tue Jun 26 00:24:51 ART 2012
     */
    public MailToChild selectMailToChildByPrimaryKey(Integer id) throws SQLException {
        MailToChild _key = new MailToChild();
        _key.setId(id);
        MailToChild record = (MailToChild) sqlMapClient.queryForObject("MAIL_TO_CHILD.selectByPrimaryKey", _key);
        return record;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table MAIL_TO_CHILD
     *
     * @mbggenerated Tue Jun 26 00:24:51 ART 2012
     */
    public int updateMailToChildByExampleSelective(MailToChild record, MailToChildExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = sqlMapClient.update("MAIL_TO_CHILD.updateByExampleSelective", parms);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table MAIL_TO_CHILD
     *
     * @mbggenerated Tue Jun 26 00:24:51 ART 2012
     */
    public int updateMailToChildByExample(MailToChild record, MailToChildExample example) throws SQLException {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = sqlMapClient.update("MAIL_TO_CHILD.updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table MAIL_TO_CHILD
     *
     * @mbggenerated Tue Jun 26 00:24:51 ART 2012
     */
    public int updateMailToChildByPrimaryKeySelective(MailToChild record) throws SQLException {
        int rows = sqlMapClient.update("MAIL_TO_CHILD.updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table MAIL_TO_CHILD
     *
     * @mbggenerated Tue Jun 26 00:24:51 ART 2012
     */
    public int updateMailToChildByPrimaryKey(MailToChild record) throws SQLException {
        int rows = sqlMapClient.update("MAIL_TO_CHILD.updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table MAIL_TO_CHILD
     *
     * @mbggenerated Tue Jun 26 00:24:51 ART 2012
     */
    protected static class UpdateByExampleParms extends MailToChildExample {
        private Object record;

        public UpdateByExampleParms(Object record, MailToChildExample example) {
            super(example);
            this.record = record;
        }

        public Object getRecord() {
            return record;
        }
    }
}