Instalacion
===========

Crear a base de datos con los scripts correspondientes (mysql o sqlserver)

Copiar el war directorio de deploy de la configuracion.
El war esta preparado para usar la conexion con sql server, en caso de querer usar con mysql se debe editar
el archivo LOJACK_WEB.war/WEB-INF/web.xml

y quitar las siguientes lineas
 <context-param>
  <param-name>SqlMapConfig</param-name>
  <param-value>SqlMapConfig-SQLSERVER-JNDI.xml</param-value>
 </context-param>
 <context-param>
  <param-name>DAOProvider</param-name>
  <param-value>SQLSERVER</param-value>
 </context-param>
 
En caso de no estar presentes se asume conexion con mysql.

Copiar la definicion de datasource correspondiente (mysql o sqlserver)


Configuracion
===========

Toda la configuracion de la aplicacion se realiza a traves de datos de la tabla SYSPROPERTIES.

A continuacion se listan las propiedades y su uso:

front.server: Se usa para generar links a la aplicacion que son absolutos, debe tener el nombre con el 
	cual el server que hostea el front se ve desde otros equipos, por ejemplo: www.lojackhome.com

thalamus.server: url del server  de thalamus, por ejemplo http://localhost:8280/ThalamusWeb/ o 
	https://testa-lojack-rest.thalamuslive.com/lojack

thalamus.touchpoint.code: codigo asignado para thalamus (REAL-LIFE-SMARTPHONE-APP)

thalamus.touchpoint.token: token asignado para thalamus 
	(k8exyct1v6edf9q50fryuq3r02upn0m98twst4etlbjgc9cnsq585879gxlcbu11)

gis.server: Ubicacion del server de GIS, por ejemplo http://localhost:8180/GISWeb/gis/

services.server: Ubicacion del server de servicios no GIS, por lo hablado debe ser el mismo.

prevent.server: Ubicacion del server de prevent, por ejemplo 
	http://www.lojackgis.com.ar/PreventWCFServices/GISService.svc

prop.tmp.path: Directorio temporal, aqui se extraera la configuracion del log4j y se escribira el log

camera.mobile.refreshTime: Tiempo de refresco de la version mobile de la camara, representa la 
	cantidad de milisegundos de refresco entre imagen e imagen

camera.applet.refreshTime: Tiempo de refresco de la version applet de la camara, representa la 
	cantidad de milisegundos de refresco entre imagen e imagen

job.refresh.time: Tiempo de refresco del proceso del front que consulta los estados de los jobs 
	asincronicos. Se expresa en milisegundos

job.abort.time: Tiempo pasado el cual se asume que un job no terminara. Pasado ese tiempo no se 
	consultara mas dicho job. Se expresa en milisegundos

job.client.refresh.time: Tiempo de refresco del ajax del cliente que consulta los estados de los 
	jobs. Se expresa en milisegundos

front.login.deplay: Milisegundos de retraso del login.